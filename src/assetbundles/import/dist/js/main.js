!function(e){function n(n){for(var s,r,a=n[0],l=n[1],c=n[2],d=0,h=[];d<a.length;d++)r=a[d],i[r]&&h.push(i[r][0]),i[r]=0;for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&(e[s]=l[s]);for(u&&u(n);h.length;)h.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],s=!0,a=1;a<t.length;a++){var l=t[a];0!==i[l]&&(s=!1)}s&&(o.splice(n--,1),e=r(r.s=t[0]))}return e}var s={},i={main:0},o=[];function r(n){if(s[n])return s[n].exports;var t=s[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.m=e,r.c=s,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)r.d(t,s,function(n){return e[n]}.bind(null,s));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="";var a=window.webpackJsonp=window.webpackJsonp||[],l=a.push.bind(a);a.push=n,a=a.slice();for(var c=0;c<a.length;c++)n(a[c]);var u=l;o.push([0,"vendor"]),t()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/sass/Import.scss":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/sass/Import.scss ***!
  \*********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./resources/sass/Import.scss?./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js")},"./resources/js/Import.js":
/*!********************************!*\
  !*** ./resources/js/Import.js ***!
  \********************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sass_Import_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/Import.scss */ "./resources/sass/Import.scss");\n/* harmony import */ var _sass_Import_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sass_Import_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_FileUpload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/FileUpload */ "./resources/js/modules/FileUpload.js");\n/* harmony import */ var _modules_SubmitButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/SubmitButton */ "./resources/js/modules/SubmitButton.js");\n/* harmony import */ var _modules_CraftExtension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/CraftExtension */ "./resources/js/modules/CraftExtension.js");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n //import Garnish from \'garnishjs\';\n\n\n\n\n\nvar Import = function Import() {\n  _classCallCheck(this, Import);\n\n  console.log(\'Hello, world!\');\n  Object(_modules_FileUpload__WEBPACK_IMPORTED_MODULE_1__["onInit"])();\n  Object(_modules_SubmitButton__WEBPACK_IMPORTED_MODULE_2__["onInit"])();\n};\n\nwindow.onload = function () {\n  if (document.querySelector(\'[data-import-plugin]\')) {\n    window.Import = new Import();\n  }\n\n  $.extend(Craft, _modules_CraftExtension__WEBPACK_IMPORTED_MODULE_3__["default"]); //Garnish\n}; // (function ($, Craft) {\n//   $.extend(Craft, {\n//     SectionSelectInput: SectionSelectInput,\n//     createSectionSelectorModal: function(elementType, settings) => {\n//       var func;\n//       if (typeof this._elementSelectorModalClasses[elementType] !== \'undefined\') {\n//         func = this._elementSelectorModalClasses[elementType];\n//       } else {\n//         func = Craft.BaseElementSelectorModal;\n//       }\n//       return new func(elementType, settings);\n//     },\n//   });\n// })(jQuery, Craft);\n\n//# sourceURL=webpack:///./resources/js/Import.js?')},"./resources/js/modules/CraftExtension.js":
/*!************************************************!*\
  !*** ./resources/js/modules/CraftExtension.js ***!
  \************************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SectionSelectInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SectionSelectInput */ "./resources/js/modules/SectionSelectInput.js");\n/* harmony import */ var _SectionSelectorModal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SectionSelectorModal */ "./resources/js/modules/SectionSelectorModal.js");\n/* harmony import */ var _SectionIndex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SectionIndex */ "./resources/js/modules/SectionIndex.js");\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n  SectionSelectInput: _SectionSelectInput__WEBPACK_IMPORTED_MODULE_0__["default"],\n  SectionSelectorModal: _SectionSelectorModal__WEBPACK_IMPORTED_MODULE_1__["default"],\n  SectionIndex: _SectionIndex__WEBPACK_IMPORTED_MODULE_2__["default"],\n  createSectionSelectorModal: function createSectionSelectorModal(elementType, settings) {\n    var func;\n\n    if (typeof this._elementSelectorModalClasses[elementType] !== \'undefined\') {\n      func = this._elementSelectorModalClasses[elementType];\n    } else {\n      func = Craft.SectionSelectorModal;\n    }\n\n    return new func(elementType, settings);\n  },\n  createSectionIndex: function createSectionIndex(_elementType, $container, settings) {\n    var elementType = \'craft\\\\models\\\\Section\';\n    var func;\n\n    if (typeof this._elementIndexClasses[elementType] !== \'undefined\') {\n      func = this._elementIndexClasses[elementType];\n    } else {\n      func = Craft.SectionIndex;\n    }\n\n    return new func(elementType, $container, settings);\n  }\n});\n\n//# sourceURL=webpack:///./resources/js/modules/CraftExtension.js?')},"./resources/js/modules/EntryPreview.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/EntryPreview.js ***!
  \**********************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EntryPreview; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar camelCase = function camelCase(str) {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index == 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, \'\');\n};\n\nvar EntryPreview =\n/*#__PURE__*/\nfunction () {\n  function EntryPreview(node) {\n    _classCallCheck(this, EntryPreview);\n\n    this.node = node;\n    this.id = node.id;\n    this.section = document.querySelector("#section-".concat(this.id));\n    this.type = document.querySelector("#type-".concat(this.id));\n    this.initDropdowns();\n    this.initMultiSelects();\n  }\n\n  _createClass(EntryPreview, [{\n    key: "initDropdowns",\n    value: function initDropdowns() {\n      var _this = this;\n\n      var dropdowns = document.querySelectorAll(\'select\');\n\n      if (dropdowns && dropdowns.length) {\n        Array.prototype.forEach.call(dropdowns, function (dropdown) {\n          var namePrefix = dropdown.name.replace(/\\[[0-9]+\\]/, \'\');\n\n          switch (namePrefix) {\n            case \'section\':\n              dropdown.addEventListener(\'change\', _this.updateType.bind(_this));\n              break;\n\n            default:\n          }\n        });\n      }\n    }\n  }, {\n    key: "initMultiSelects",\n    value: function initMultiSelects() {\n      var multiSelectOptions = document.querySelectorAll(\'select[multiple]>option\');\n      Array.prototype.forEach.call(multiSelectOptions, function (opt) {\n        opt.selected = true;\n      });\n    }\n  }, {\n    key: "updateType",\n    value: function updateType(e) {\n      var _this2 = this;\n\n      var newValue = parseInt(e.target.value);\n      fetch("/admin/import/sections/types/".concat(newValue)).then(function (resp) {\n        return resp.json();\n      }).then(function (data) {\n        var newTypes = data;\n\n        if (newTypes) {\n          var options = \'\';\n\n          for (var i = 0; i < newTypes.length; i++) {\n            options += "<option value=\\"".concat(newTypes[i].id, "\\">").concat(newTypes[i].name, "</option>");\n          }\n\n          _this2.type.innerHTML = options;\n        } else {\n          console.log(\'Error\');\n          _this2.type.innerHTML = \'\';\n        }\n      });\n    }\n  }, {\n    key: "toggleSites",\n    value: function toggleSites(e) {\n      var options = document.querySelectorAll("select[name=\\"sites[".concat(this.id, "][]\\"]>option"));\n\n      if (options && options.length) {\n        // Look at the first checkbox to see if we are checking/unchecking the rest of them\n        var selected = options[0].selected;\n        Array.prototype.forEach.call(options, function (option) {\n          option.selected = !selected;\n        });\n      }\n    }\n  }]);\n\n  return EntryPreview;\n}();\n\n\n\n//# sourceURL=webpack:///./resources/js/modules/EntryPreview.js?')},"./resources/js/modules/FileUpload.js":
/*!********************************************!*\
  !*** ./resources/js/modules/FileUpload.js ***!
  \********************************************/
/*! exports provided: onInit */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onInit\", function() { return onInit; });\n/* harmony import */ var _EntryPreview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EntryPreview */ \"./resources/js/modules/EntryPreview.js\");\n/* harmony import */ var _NewSectionButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NewSectionButton */ \"./resources/js/modules/NewSectionButton.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar removeDragData = function removeDragData(e) {\n  if (e.dataTransfer.items) {\n    e.dataTransfer.items.clear();\n  } else {\n    e.dataTransfer.clearData();\n  }\n};\n\nvar FileUpload =\n/*#__PURE__*/\nfunction () {\n  function FileUpload(node) {\n    _classCallCheck(this, FileUpload);\n\n    this.element = node;\n    this.uploadUrl = '/admin/import/upload';\n    this.label = 'Choose a file';\n    this.files = [];\n    this.results = document.querySelector('[data-import-file-upload-result]'); // Drag/drop\n\n    this.element.addEventListener('drop', this.dropHandler.bind(this));\n    this.element.addEventListener('dragover', this.dragOverHandler.bind(this)); // Clear\n\n    document.querySelector('[data-import-file-clear]').addEventListener('click', this.clearFiles.bind(this)); // Input type=\"file\"\n\n    this.input = document.querySelector('input[type=\"file\"].FileUpload-input');\n\n    if (this.input) {\n      this.input.addEventListener('change', this.fileSelectHandler.bind(this));\n    }\n\n    this.setSubmitEnabled(false);\n  }\n\n  _createClass(FileUpload, [{\n    key: \"upload\",\n    value: function upload() {\n      var _this = this;\n\n      var formData = new FormData();\n      Array.prototype.forEach.call(this.files, function (f) {\n        formData.append('files[]', f, f.name);\n      });\n      fetch(this.uploadUrl, {\n        method: 'post',\n        credentials: 'same-origin',\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        body: formData\n      }).then(function (resp) {\n        return resp.text();\n      }).then(function (data) {\n        _this.results.innerHTML = data;\n        var entries = document.querySelectorAll('.ImportPreview-entry');\n\n        if (entries && entries.length) {\n          Array.prototype.forEach.call(entries, function (entry) {\n            new _EntryPreview__WEBPACK_IMPORTED_MODULE_0__[\"default\"](entry);\n          });\n\n          _this.setSubmitEnabled(true);\n\n          Object(_NewSectionButton__WEBPACK_IMPORTED_MODULE_1__[\"onInit\"])();\n          var metaFields = document.querySelectorAll('[data-meta]');\n\n          if (metaFields) {\n            Array.prototype.forEach.call(metaFields, function (field) {\n              console.log(field.innerText);\n              eval(field.innerText);\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"fileSelectHandler\",\n    value: function fileSelectHandler(e) {\n      this.input.disabed = true;\n      this.files = e.target.files;\n      this.updateLabel();\n      this.upload();\n    }\n  }, {\n    key: \"dropHandler\",\n    value: function dropHandler(e) {\n      var _this2 = this;\n\n      console.log(e);\n      e.preventDefault();\n\n      if (e.dataTransfer.items) {\n        Array.prototype.forEach.call(e.dataTransfer.items, function (item) {\n          if (item.kind === 'file') {\n            var file = item.getAsFile();\n\n            _this2.files.push(file);\n          }\n        });\n      } else {\n        Array.prototype.forEach.call(e.dataTransfer.files, function (file) {\n          _this2.files.push(file);\n        });\n      }\n\n      this.updateLabel();\n      removeDragData(e);\n      this.upload();\n      return;\n    }\n  }, {\n    key: \"dragOverHandler\",\n    value: function dragOverHandler(e) {\n      e.preventDefault();\n      return;\n    }\n  }, {\n    key: \"clearFiles\",\n    value: function clearFiles() {\n      this.files = [];\n      this.updateLabel();\n      this.results.innerHTML = '';\n      this.setSubmitEnabled(false);\n    }\n  }, {\n    key: \"setSubmitEnabled\",\n    value: function setSubmitEnabled(enabled) {\n      var submitButton = document.querySelector('[data-submit-button]');\n\n      if (submitButton) {\n        submitButton.dataset.valid = enabled ? '1' : '0';\n      }\n    }\n  }, {\n    key: \"updateLabel\",\n    value: function updateLabel() {\n      var _this3 = this;\n\n      this.label = '';\n      var labelSpan = document.querySelector('.FileUpload-input + label>span');\n      var instructionSpan = document.querySelector('[data-import-file-instructions]');\n      var clearSpan = document.querySelector('[data-import-file-clear]');\n\n      if (this.files && this.files.length) {\n        console.log(this.files);\n        Array.prototype.forEach.call(this.files, function (file) {\n          if (_this3.label.length) {\n            _this3.label += ', ';\n          }\n\n          _this3.label += file.name;\n        });\n        instructionSpan.classList.add('hidden');\n        clearSpan.classList.remove('hidden');\n      } else {\n        this.label = 'Choose a file';\n        instructionSpan.classList.remove('hidden');\n        clearSpan.classList.add('hidden');\n      }\n\n      labelSpan.innerText = this.label;\n    }\n  }]);\n\n  return FileUpload;\n}();\n\nvar onInit = function onInit() {\n  var fileUploads = document.querySelectorAll('[data-import-file-upload]');\n\n  if (fileUploads && fileUploads.length) {\n    Array.prototype.forEach.call(fileUploads, function (f) {\n      new FileUpload(f);\n    });\n  }\n};\n\n//# sourceURL=webpack:///./resources/js/modules/FileUpload.js?")},"./resources/js/modules/NewSectionButton.js":
/*!**************************************************!*\
  !*** ./resources/js/modules/NewSectionButton.js ***!
  \**************************************************/
/*! exports provided: onInit */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onInit", function() { return onInit; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NewSectionButton =\n/*#__PURE__*/\nfunction () {\n  function NewSectionButton(node) {\n    _classCallCheck(this, NewSectionButton);\n\n    this.node = node;\n    this.node.addEventListener(\'click\', this.addNewSection);\n  }\n\n  _createClass(NewSectionButton, [{\n    key: "addNewSection",\n    value: function addNewSection() {\n      var opts = {};\n      Craft.postActionRequest(opts);\n    }\n  }]);\n\n  return NewSectionButton;\n}();\n\nvar onInit = function onInit() {\n  var newSectionButtons = document.querySelectorAll(\'[data-new-section-btn]\');\n\n  if (newSectionButtons) {\n    Array.prototype.forEach.call(newSectionButtons, function (button) {\n      new NewSectionButton(button);\n    });\n  }\n};\n\n//# sourceURL=webpack:///./resources/js/modules/NewSectionButton.js?')},"./resources/js/modules/SectionIndex.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/SectionIndex.js ***!
  \**********************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/** global: Craft */\n\n/** global: Garnish */\n\n/**\n * Element index class\n */\nvar SectionIndex = Garnish.Base.extend({\n  // Properties\n  // =========================================================================\n  initialized: false,\n  elementType: null,\n  instanceState: null,\n  sourceStates: null,\n  sourceStatesStorageKey: null,\n  searchTimeout: null,\n  sourceSelect: null,\n  $container: null,\n  $main: null,\n  $mainSpinner: null,\n  isIndexBusy: false,\n  $sidebar: null,\n  showingSidebar: null,\n  sourceKey: null,\n  sourceViewModes: null,\n  $source: null,\n  sourcesByKey: null,\n  $visibleSources: null,\n  $customizeSourcesBtn: null,\n  customizeSourcesModal: null,\n  $toolbar: null,\n  $toolbarFlexContainer: null,\n  toolbarOffset: null,\n  $search: null,\n  searching: false,\n  searchText: null,\n  $clearSearchBtn: null,\n  $statusMenuBtn: null,\n  statusMenu: null,\n  status: null,\n  $siteMenuBtn: null,\n  siteMenu: null,\n  siteId: null,\n  $sortMenuBtn: null,\n  sortMenu: null,\n  $sortAttributesList: null,\n  $sortDirectionsList: null,\n  $scoreSortAttribute: null,\n  $structureSortAttribute: null,\n  $elements: null,\n  $viewModeBtnContainer: null,\n  viewModeBtns: null,\n  viewMode: null,\n  view: null,\n  _autoSelectElements: null,\n  actions: null,\n  actionsHeadHtml: null,\n  actionsFootHtml: null,\n  $selectAllContainer: null,\n  $selectAllCheckbox: null,\n  showingActionTriggers: false,\n  _$detachedToolbarItems: null,\n  _$triggers: null,\n  // Public methods\n  // =========================================================================\n\n  /**\n   * Constructor\n   */\n  init: function init(elementType, $container, settings) {\n    this.elementType = elementType;\n    this.$container = $container;\n    this.setSettings(settings, Craft.BaseElementIndex.defaults); // Set the state objects\n    // ---------------------------------------------------------------------\n\n    this.instanceState = this.getDefaultInstanceState();\n    this.sourceStates = {}; // Instance states (selected source) are stored by a custom storage key defined in the settings\n\n    if (this.settings.storageKey) {\n      $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n    } // Source states (view mode, etc.) are stored by the element type and context\n\n\n    this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n    $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {})); // Find the DOM elements\n    // ---------------------------------------------------------------------\n\n    this.$main = this.$container.find('.main');\n    this.$toolbar = this.$container.find('.toolbar:first');\n    this.$toolbarFlexContainer = this.$toolbar.children('.flex');\n    this.$statusMenuBtn = this.$toolbarFlexContainer.find('.statusmenubtn:first');\n    this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n    this.$sortMenuBtn = this.$toolbarFlexContainer.find('.sortmenubtn:first');\n    this.$search = this.$toolbarFlexContainer.find('.search:first input:first');\n    this.$clearSearchBtn = this.$toolbarFlexContainer.find('.search:first > .clear');\n    this.$mainSpinner = this.$toolbarFlexContainer.find('.spinner:first');\n    this.$sidebar = this.$container.find('.sidebar:first');\n    this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n    this.$elements = this.$container.find('.elements:first'); // Hide sidebar if needed\n\n    if (this.settings.hideSidebar) {\n      this.$sidebar.hide();\n      $('.body, .content', this.$container).removeClass('has-sidebar');\n    } // Keep the toolbar at the top of the window\n\n\n    if ((this.settings.toolbarFixed || this.settings.toolbarFixed === null && this.settings.context === 'index') && !Garnish.isMobileBrowser(true)) {\n      this.addListener(Garnish.$win, 'resize', 'updateFixedToolbar');\n      this.addListener(Garnish.$scrollContainer, 'scroll', 'updateFixedToolbar');\n    } // Initialize the sources\n    // ---------------------------------------------------------------------\n\n\n    if (!this.initSources()) {\n      return;\n    } // Customize button\n\n\n    if (this.$customizeSourcesBtn.length) {\n      this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n    } // Initialize the status menu\n    // ---------------------------------------------------------------------\n\n\n    if (this.$statusMenuBtn.length) {\n      this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n      this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n    } // Initialize the site menu\n    // ---------------------------------------------------------------------\n    // Is there a site menu?\n\n\n    if (this.$siteMenuBtn.length) {\n      this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu; // Figure out the initial site\n\n      var $option = this.siteMenu.$options.filter('.sel:first');\n\n      if (!$option.length) {\n        $option = this.siteMenu.$options.first();\n      }\n\n      if ($option.length) {\n        this._setSite($option.data('site-id'));\n      } else {\n        // No site options -- they must not have any site permissions\n        this.settings.criteria = {\n          id: '0'\n        };\n      }\n\n      this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n      if (this.siteId) {\n        // Do we have a different site stored in localStorage?\n        var storedSiteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n\n        if (storedSiteId && storedSiteId != this.siteId) {\n          // Is that one available here?\n          var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + storedSiteId + '\"]:first');\n\n          if ($storedSiteOption.length) {\n            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n            $storedSiteOption.trigger('click');\n          }\n        }\n      }\n    } else if (this.settings.criteria && this.settings.criteria.siteId) {\n      this._setSite(this.settings.criteria.siteId);\n    } else {\n      this._setSite(Craft.siteId);\n    } // Initialize the search input\n    // ---------------------------------------------------------------------\n    // Automatically update the elements after new search text has been sitting for a 1/2 second\n\n\n    this.addListener(this.$search, 'textchange', $.proxy(function () {\n      if (!this.searching && this.$search.val()) {\n        this.startSearching();\n      } else if (this.searching && !this.$search.val()) {\n        this.stopSearching();\n      }\n\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n\n      this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n    }, this)); // Update the elements when the Return key is pressed\n\n    this.addListener(this.$search, 'keypress', $.proxy(function (ev) {\n      if (ev.keyCode === Garnish.RETURN_KEY) {\n        ev.preventDefault();\n\n        if (this.searchTimeout) {\n          clearTimeout(this.searchTimeout);\n        }\n\n        this.updateElementsIfSearchTextChanged();\n      }\n    }, this)); // Clear the search when the X button is clicked\n\n    this.addListener(this.$clearSearchBtn, 'click', $.proxy(function () {\n      this.$search.val('');\n\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n\n      if (!Garnish.isMobileBrowser(true)) {\n        this.$search.trigger('focus');\n      }\n\n      this.stopSearching();\n      this.updateElementsIfSearchTextChanged();\n    }, this)); // Auto-focus the Search box\n\n    if (!Garnish.isMobileBrowser(true)) {\n      this.$search.trigger('focus');\n    } // Initialize the sort menu\n    // ---------------------------------------------------------------------\n    // Is there a sort menu?\n\n\n    if (this.$sortMenuBtn.length) {\n      this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n      this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n      this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n      this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n    } // Let everyone know that the UI is initialized\n    // ---------------------------------------------------------------------\n\n\n    this.initialized = true;\n    this.afterInit(); // Select the initial source\n    // ---------------------------------------------------------------------\n\n    this.selectDefaultSource(); // Load the first batch of elements!\n    // ---------------------------------------------------------------------\n\n    this.updateElements();\n  },\n  afterInit: function afterInit() {\n    this.onAfterInit();\n  },\n  getSourceContainer: function getSourceContainer() {\n    return this.$sidebar.find('nav>ul');\n  },\n\n  get $sources() {\n    if (!this.sourceSelect) {\n      return undefined;\n    }\n\n    return this.sourceSelect.$items;\n  },\n\n  initSources: function initSources() {\n    var $sources = this._getSourcesInList(this.getSourceContainer()); // No source, no party.\n\n\n    if ($sources.length === 0) {\n      return false;\n    } // The source selector\n\n\n    if (!this.sourceSelect) {\n      this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n        multi: false,\n        allowEmpty: false,\n        vertical: true,\n        onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n      });\n    }\n\n    this.sourcesByKey = {};\n\n    this._initSources($sources);\n\n    return true;\n  },\n  selectDefaultSource: function selectDefaultSource() {\n    var sourceKey = this.getDefaultSourceKey(),\n        $source;\n\n    if (sourceKey) {\n      $source = this.getSourceByKey(sourceKey); // Make sure it's visible\n\n      if (this.$visibleSources.index($source) === -1) {\n        $source = null;\n      }\n    }\n\n    if (!sourceKey || !$source) {\n      // Select the first source by default\n      $source = this.$visibleSources.first();\n    }\n\n    if ($source.length) {\n      this.selectSource($source);\n    }\n  },\n  refreshSources: function refreshSources() {\n    this.sourceSelect.removeAllItems();\n    var params = {\n      context: this.settings.context,\n      elementType: this.elementType\n    };\n    this.setIndexBusy();\n    Craft.postActionRequest(this.settings.refreshSourcesAction, params, $.proxy(function (response, textStatus) {\n      this.setIndexAvailable();\n\n      if (textStatus === 'success') {\n        this.getSourceContainer().replaceWith(response.html);\n        this.initSources();\n        this.selectDefaultSource();\n      } else {\n        Craft.cp.displayError(Craft.t('app', 'An unknown error occurred.'));\n      }\n    }, this));\n  },\n  updateFixedToolbar: function updateFixedToolbar(e) {\n    this.updateFixedToolbar._scrollTop = Garnish.$scrollContainer.scrollTop();\n\n    if (Garnish.$win.width() > 992 && this.updateFixedToolbar._scrollTop >= 17) {\n      if (this.updateFixedToolbar._makingFixed = !this.$toolbar.hasClass('fixed')) {\n        this.$elements.css('padding-top', this.$toolbar.outerHeight() + 21);\n        this.$toolbar.addClass('fixed');\n      }\n\n      if (this.updateFixedToolbar._makingFixed || e.type === 'resize') {\n        this.$toolbar.css({\n          top: Garnish.$scrollContainer.offset().top,\n          width: this.$main.width()\n        });\n      }\n    } else {\n      if (this.$toolbar.hasClass('fixed')) {\n        this.$toolbar.removeClass('fixed');\n        this.$toolbar.css('width', '');\n        this.$elements.css('padding-top', '');\n        this.$toolbar.css('top', '0');\n      }\n    }\n  },\n  initSource: function initSource($source) {\n    this.sourceSelect.addItems($source);\n    this.initSourceToggle($source);\n    this.sourcesByKey[$source.data('key')] = $source;\n\n    if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n      this._expandSource($source);\n    }\n  },\n  initSourceToggle: function initSourceToggle($source) {\n    var $toggle = this._getSourceToggle($source);\n\n    if ($toggle.length) {\n      // Remove handlers for the same thing. Just in case.\n      this.removeListener($toggle, 'click', '_handleSourceToggleClick');\n      this.addListener($toggle, 'click', '_handleSourceToggleClick');\n      $source.data('hasNestedSources', true);\n    } else {\n      $source.data('hasNestedSources', false);\n    }\n  },\n  deinitSource: function deinitSource($source) {\n    this.sourceSelect.removeItems($source);\n    this.deinitSourceToggle($source);\n    delete this.sourcesByKey[$source.data('key')];\n  },\n  deinitSourceToggle: function deinitSourceToggle($source) {\n    if ($source.data('hasNestedSources')) {\n      var $toggle = this._getSourceToggle($source);\n\n      this.removeListener($toggle, 'click');\n    }\n\n    $source.removeData('hasNestedSources');\n  },\n  getDefaultInstanceState: function getDefaultInstanceState() {\n    return {\n      selectedSource: null,\n      expandedSources: []\n    };\n  },\n  getDefaultSourceKey: function getDefaultSourceKey() {\n    return this.instanceState.selectedSource;\n  },\n  getDefaultExpandedSources: function getDefaultExpandedSources() {\n    return this.instanceState.expandedSources;\n  },\n  startSearching: function startSearching() {\n    // Show the clear button and add/select the Score sort option\n    this.$clearSearchBtn.removeClass('hidden');\n\n    if (!this.$scoreSortAttribute) {\n      this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n      this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n    }\n\n    this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n    this.setSortAttribute('score');\n    this.getSortAttributeOption('structure').addClass('disabled');\n    this.searching = true;\n  },\n  stopSearching: function stopSearching() {\n    // Hide the clear button and Score sort option\n    this.$clearSearchBtn.addClass('hidden');\n    this.$scoreSortAttribute.detach();\n    this.getSortAttributeOption('structure').removeClass('disabled');\n    this.setStoredSortOptionsForSource();\n    this.searching = false;\n  },\n  setInstanceState: function setInstanceState(key, value) {\n    if (_typeof(key) === 'object') {\n      $.extend(this.instanceState, key);\n    } else {\n      this.instanceState[key] = value;\n    }\n\n    this.storeInstanceState();\n  },\n  storeInstanceState: function storeInstanceState() {\n    if (this.settings.storageKey) {\n      Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n    }\n  },\n  getSourceState: function getSourceState(source, key, defaultValue) {\n    if (typeof this.sourceStates[source] === 'undefined') {\n      // Set it now so any modifications to it by whoever's calling this will be stored.\n      this.sourceStates[source] = {};\n    }\n\n    if (typeof key === 'undefined') {\n      return this.sourceStates[source];\n    } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n      return this.sourceStates[source][key];\n    } else {\n      return typeof defaultValue !== 'undefined' ? defaultValue : null;\n    }\n  },\n  getSelectedSourceState: function getSelectedSourceState(key, defaultValue) {\n    return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n  },\n  setSelecetedSourceState: function setSelecetedSourceState(key, value) {\n    var viewState = this.getSelectedSourceState();\n\n    if (_typeof(key) === 'object') {\n      $.extend(viewState, key);\n    } else {\n      viewState[key] = value;\n    }\n\n    this.sourceStates[this.instanceState.selectedSource] = viewState; // Store it in localStorage too\n\n    Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n  },\n  storeSortAttributeAndDirection: function storeSortAttributeAndDirection() {\n    var attr = this.getSelectedSortAttribute();\n\n    if (attr !== 'score') {\n      this.setSelecetedSourceState({\n        order: attr,\n        sort: this.getSelectedSortDirection()\n      });\n    }\n  },\n\n  /**\n   * Returns the data that should be passed to the elementIndex/getElements controller action\n   * when loading elements.\n   */\n  getViewParams: function getViewParams() {\n    var criteria = $.extend({\n      status: this.status,\n      siteId: this.siteId,\n      search: this.searchText,\n      limit: this.settings.batchSize\n    }, this.settings.criteria);\n    var params = {\n      context: this.settings.context,\n      elementType: this.elementType,\n      source: this.instanceState.selectedSource,\n      criteria: criteria,\n      disabledElementIds: this.settings.disabledElementIds,\n      viewState: this.getSelectedSourceState()\n    }; // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n\n    params.viewState.order = this.getSelectedSortAttribute();\n    params.viewState.sort = this.getSelectedSortDirection();\n\n    if (this.getSelectedSortAttribute() === 'structure') {\n      if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n        this.instanceState.collapsedElementIds = [];\n      }\n\n      params.collapsedElementIds = this.instanceState.collapsedElementIds;\n    }\n\n    return params;\n  },\n  updateElements: function updateElements() {\n    // Ignore if we're not fully initialized yet\n    if (!this.initialized) {\n      return;\n    }\n\n    this.setIndexBusy(); // Kill the old view class\n\n    if (this.view) {\n      this.view.destroy();\n      delete this.view;\n    }\n\n    this.$elements.html('');\n    var params = this.getViewParams();\n    Craft.postActionRequest(this.settings.updateElementsAction, params, $.proxy(function (response, textStatus) {\n      this.setIndexAvailable();\n\n      if (textStatus === 'success') {\n        this._updateView(params, response);\n      } else {\n        Craft.cp.displayError(Craft.t('app', 'An unknown error occurred.'));\n      }\n    }, this));\n  },\n  updateElementsIfSearchTextChanged: function updateElementsIfSearchTextChanged() {\n    if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n      this.updateElements();\n    }\n  },\n  showActionTriggers: function showActionTriggers() {\n    // Ignore if they're already shown\n    if (this.showingActionTriggers) {\n      return;\n    } // Hard-code the min toolbar height in case it was taller than the actions toolbar\n    // (prevents the elements from jumping if this ends up being a double-click)\n\n\n    this.$toolbar.css('min-height', this.$toolbar.height()); // Hide any toolbar inputs\n\n    this._$detachedToolbarItems = this.$toolbarFlexContainer.children().not(this.$selectAllContainer).not(this.$mainSpinner);\n\n    this._$detachedToolbarItems.detach();\n\n    if (!this._$triggers) {\n      this._createTriggers();\n    } else {\n      this._$triggers.insertAfter(this.$selectAllContainer);\n    }\n\n    this.showingActionTriggers = true;\n  },\n  submitAction: function submitAction(actionClass, actionParams) {\n    // Make sure something's selected\n    var selectedElementIds = this.view.getSelectedElementIds(),\n        totalSelected = selectedElementIds.length;\n\n    if (totalSelected === 0) {\n      return;\n    } // Find the action\n\n\n    var action;\n\n    for (var i = 0; i < this.actions.length; i++) {\n      if (this.actions[i].type === actionClass) {\n        action = this.actions[i];\n        break;\n      }\n    }\n\n    if (!action || action.confirm && !confirm(action.confirm)) {\n      return;\n    } // Get ready to submit\n\n\n    var viewParams = this.getViewParams();\n    var params = $.extend(viewParams, actionParams, {\n      elementAction: actionClass,\n      elementIds: selectedElementIds\n    }); // Do it\n\n    this.setIndexBusy();\n    this._autoSelectElements = selectedElementIds;\n    Craft.postActionRequest(this.settings.submitActionsAction, params, $.proxy(function (response, textStatus) {\n      this.setIndexAvailable();\n\n      if (textStatus === 'success') {\n        if (response.success) {\n          this._updateView(viewParams, response);\n\n          if (response.message) {\n            Craft.cp.displayNotice(response.message);\n          }\n\n          this.afterAction(action, params);\n        } else {\n          Craft.cp.displayError(response.message);\n        }\n      }\n    }, this));\n  },\n  afterAction: function afterAction(action, params) {\n    // There may be a new background task that needs to be run\n    Craft.cp.runQueue();\n    this.onAfterAction(action, params);\n  },\n  hideActionTriggers: function hideActionTriggers() {\n    // Ignore if there aren't any\n    if (!this.showingActionTriggers) {\n      return;\n    }\n\n    this._$detachedToolbarItems.insertBefore(this.$mainSpinner);\n\n    this._$triggers.detach();\n\n    this.$toolbarFlexContainer.children().not(this.$selectAllContainer).removeClass('hidden'); // Unset the min toolbar height\n\n    this.$toolbar.css('min-height', '');\n    this.showingActionTriggers = false;\n  },\n  updateActionTriggers: function updateActionTriggers() {\n    // Do we have an action UI to update?\n    if (this.actions) {\n      var totalSelected = this.view.getSelectedElements().length;\n\n      if (totalSelected !== 0) {\n        if (totalSelected === this.view.getEnabledElements().length) {\n          this.$selectAllCheckbox.removeClass('indeterminate');\n          this.$selectAllCheckbox.addClass('checked');\n          this.$selectAllBtn.attr('aria-checked', 'true');\n        } else {\n          this.$selectAllCheckbox.addClass('indeterminate');\n          this.$selectAllCheckbox.removeClass('checked');\n          this.$selectAllBtn.attr('aria-checked', 'mixed');\n        }\n\n        this.showActionTriggers();\n      } else {\n        this.$selectAllCheckbox.removeClass('indeterminate checked');\n        this.$selectAllBtn.attr('aria-checked', 'false');\n        this.hideActionTriggers();\n      }\n    }\n  },\n  getSelectedElements: function getSelectedElements() {\n    return this.view ? this.view.getSelectedElements() : $();\n  },\n  getSelectedElementIds: function getSelectedElementIds() {\n    return this.view ? this.view.getSelectedElementIds() : [];\n  },\n  getSortAttributeOption: function getSortAttributeOption(attr) {\n    return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n  },\n  getSelectedSortAttribute: function getSelectedSortAttribute() {\n    return this.$sortAttributesList.find('a.sel:first').data('attr');\n  },\n  setSortAttribute: function setSortAttribute(attr) {\n    // Find the option (and make sure it actually exists)\n    var $option = this.getSortAttributeOption(attr);\n\n    if ($option.length) {\n      this.$sortAttributesList.find('a.sel').removeClass('sel');\n      $option.addClass('sel');\n      var label = $option.text();\n      this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {\n        attribute: label\n      }));\n      this.$sortMenuBtn.text(label);\n      this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n      if (attr === 'structure') {\n        this.$sortDirectionsList.find('a').addClass('disabled');\n      } else {\n        this.$sortDirectionsList.find('a').removeClass('disabled');\n      }\n    }\n  },\n  getSortDirectionOption: function getSortDirectionOption(dir) {\n    return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n  },\n  getSelectedSortDirection: function getSelectedSortDirection() {\n    return this.$sortDirectionsList.find('a.sel:first').data('dir');\n  },\n  getSelectedViewMode: function getSelectedViewMode() {\n    return this.getSelectedSourceState('mode');\n  },\n  setSortDirection: function setSortDirection(dir) {\n    if (dir !== 'desc') {\n      dir = 'asc';\n    }\n\n    this.$sortMenuBtn.attr('data-icon', dir);\n    this.$sortDirectionsList.find('a.sel').removeClass('sel');\n    this.getSortDirectionOption(dir).addClass('sel');\n  },\n  getSourceByKey: function getSourceByKey(key) {\n    if (typeof this.sourcesByKey[key] === 'undefined') {\n      return null;\n    }\n\n    return this.sourcesByKey[key];\n  },\n  selectSource: function selectSource($source) {\n    if (!$source || !$source.length) {\n      return false;\n    }\n\n    if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n      return false;\n    }\n\n    this.$source = $source;\n    this.sourceKey = $source.data('key');\n    this.setInstanceState('selectedSource', this.sourceKey);\n    this.sourceSelect.selectItem($source);\n    Craft.cp.updateSidebarMenuLabel();\n\n    if (this.searching) {\n      // Clear the search value without causing it to update elements\n      this.searchText = null;\n      this.$search.val('');\n      this.stopSearching();\n    } // Sort menu\n    // ----------------------------------------------------------------------\n    // Does this source have a structure?\n\n\n    if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n      if (!this.$structureSortAttribute) {\n        this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n        this.sortMenu.addOptions(this.$structureSortAttribute.children());\n      }\n\n      this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n    } else if (this.$structureSortAttribute) {\n      this.$structureSortAttribute.removeClass('sel').detach();\n    }\n\n    this.setStoredSortOptionsForSource(); // View mode buttons\n    // ----------------------------------------------------------------------\n    // Clear out any previous view mode data\n\n    if (this.$viewModeBtnContainer) {\n      this.$viewModeBtnContainer.remove();\n    }\n\n    this.viewModeBtns = {};\n    this.viewMode = null; // Get the new list of view modes\n\n    this.sourceViewModes = this.getViewModesForSource(); // Create the buttons if there's more than one mode available to this source\n\n    if (this.sourceViewModes.length > 1) {\n      this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').insertBefore(this.$mainSpinner);\n\n      for (var i = 0; i < this.sourceViewModes.length; i++) {\n        var sourceViewMode = this.sourceViewModes[i];\n        var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' + ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' + ' title=\"' + sourceViewMode.title + '\"' + (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') + '/>').appendTo(this.$viewModeBtnContainer);\n        this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n        this.addListener($viewModeBtn, 'click', {\n          mode: sourceViewMode.mode\n        }, function (ev) {\n          this.selectViewMode(ev.data.mode);\n          this.updateElements();\n        });\n      }\n    } // Figure out which mode we should start with\n\n\n    var viewMode = this.getSelectedViewMode();\n\n    if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n      // Try to keep using the current view mode\n      if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n        viewMode = this.viewMode;\n      } // Just use the first one\n      else {\n          viewMode = this.sourceViewModes[0].mode;\n        }\n    }\n\n    this.selectViewMode(viewMode);\n    this.onSelectSource();\n    return true;\n  },\n  selectSourceByKey: function selectSourceByKey(key) {\n    var $source = this.getSourceByKey(key);\n\n    if ($source) {\n      return this.selectSource($source);\n    } else {\n      return false;\n    }\n  },\n  setStoredSortOptionsForSource: function setStoredSortOptionsForSource() {\n    // Default to whatever's first\n    this.setSortAttribute();\n    this.setSortDirection('asc');\n    var sortAttr = this.getSelectedSourceState('order'),\n        sortDir = this.getSelectedSourceState('sort');\n\n    if (!sortAttr) {\n      // Get the default\n      sortAttr = this.getDefaultSort();\n\n      if (Garnish.isArray(sortAttr)) {\n        sortDir = sortAttr[1];\n        sortAttr = sortAttr[0];\n      }\n    }\n\n    if (sortDir !== 'asc' && sortDir !== 'desc') {\n      sortDir = 'asc';\n    }\n\n    this.setSortAttribute(sortAttr);\n    this.setSortDirection(sortDir);\n  },\n  getDefaultSort: function getDefaultSort() {\n    // Does the source specify what to do?\n    if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n      return this.$source.attr('data-default-sort').split(':');\n    } else {\n      // Default to whatever's first\n      return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n    }\n  },\n  getViewModesForSource: function getViewModesForSource() {\n    var viewModes = [{\n      mode: 'table',\n      title: Craft.t('app', 'Display in a table'),\n      icon: 'list'\n    }];\n\n    if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n      viewModes.push({\n        mode: 'thumbs',\n        title: Craft.t('app', 'Display as thumbnails'),\n        icon: 'grid'\n      });\n    }\n\n    return viewModes;\n  },\n  doesSourceHaveViewMode: function doesSourceHaveViewMode(viewMode) {\n    for (var i = 0; i < this.sourceViewModes.length; i++) {\n      if (this.sourceViewModes[i].mode === viewMode) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  selectViewMode: function selectViewMode(viewMode, force) {\n    // Make sure that the current source supports it\n    if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n      viewMode = this.sourceViewModes[0].mode;\n    } // Has anything changed?\n\n\n    if (viewMode === this.viewMode) {\n      return;\n    } // Deselect the previous view mode\n\n\n    if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n      this.viewModeBtns[this.viewMode].removeClass('active');\n    }\n\n    this.viewMode = viewMode;\n    this.setSelecetedSourceState('mode', this.viewMode);\n\n    if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n      this.viewModeBtns[this.viewMode].addClass('active');\n    }\n  },\n  createView: function createView(mode, settings) {\n    var viewClass = this.getViewClass(mode);\n    return new viewClass(this, this.$elements, settings);\n  },\n  getViewClass: function getViewClass(mode) {\n    switch (mode) {\n      case 'table':\n        return Craft.TableElementIndexView;\n\n      case 'thumbs':\n        return Craft.ThumbsElementIndexView;\n\n      default:\n        throw 'View mode \"' + mode + '\" not supported.';\n    }\n  },\n  rememberDisabledElementId: function rememberDisabledElementId(id) {\n    var index = $.inArray(id, this.settings.disabledElementIds);\n\n    if (index === -1) {\n      this.settings.disabledElementIds.push(id);\n    }\n  },\n  forgetDisabledElementId: function forgetDisabledElementId(id) {\n    var index = $.inArray(id, this.settings.disabledElementIds);\n\n    if (index !== -1) {\n      this.settings.disabledElementIds.splice(index, 1);\n    }\n  },\n  enableElements: function enableElements($elements) {\n    $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n    for (var i = 0; i < $elements.length; i++) {\n      var id = $($elements[i]).data('id');\n      this.forgetDisabledElementId(id);\n    }\n\n    this.onEnableElements($elements);\n  },\n  disableElements: function disableElements($elements) {\n    $elements.removeClass('sel').addClass('disabled');\n\n    for (var i = 0; i < $elements.length; i++) {\n      var id = $($elements[i]).data('id');\n      this.rememberDisabledElementId(id);\n    }\n\n    this.onDisableElements($elements);\n  },\n  getElementById: function getElementById(id) {\n    return this.view.getElementById(id);\n  },\n  enableElementsById: function enableElementsById(ids) {\n    ids = $.makeArray(ids);\n\n    for (var i = 0; i < ids.length; i++) {\n      var id = ids[i],\n          $element = this.getElementById(id);\n\n      if ($element && $element.length) {\n        this.enableElements($element);\n      } else {\n        this.forgetDisabledElementId(id);\n      }\n    }\n  },\n  disableElementsById: function disableElementsById(ids) {\n    ids = $.makeArray(ids);\n\n    for (var i = 0; i < ids.length; i++) {\n      var id = ids[i],\n          $element = this.getElementById(id);\n\n      if ($element && $element.length) {\n        this.disableElements($element);\n      } else {\n        this.rememberDisabledElementId(id);\n      }\n    }\n  },\n  selectElementAfterUpdate: function selectElementAfterUpdate(id) {\n    if (this._autoSelectElements === null) {\n      this._autoSelectElements = [];\n    }\n\n    this._autoSelectElements.push(id);\n  },\n  addButton: function addButton($button) {\n    this.getButtonContainer().append($button);\n  },\n  isShowingSidebar: function isShowingSidebar() {\n    if (this.showingSidebar === null) {\n      this.showingSidebar = this.$sidebar.length && !this.$sidebar.hasClass('hidden');\n    }\n\n    return this.showingSidebar;\n  },\n  getButtonContainer: function getButtonContainer() {\n    // Is there a predesignated place where buttons should go?\n    if (this.settings.buttonContainer) {\n      return $(this.settings.buttonContainer);\n    } else {\n      var $container = $('#button-container');\n\n      if (!$container.length) {\n        $container = $('<div id=\"button-container\"/>').appendTo(Craft.cp.$header);\n      }\n\n      return $container;\n    }\n  },\n  setIndexBusy: function setIndexBusy() {\n    this.$mainSpinner.removeClass('invisible');\n    this.isIndexBusy = true;\n  },\n  setIndexAvailable: function setIndexAvailable() {\n    this.$mainSpinner.addClass('invisible');\n    this.isIndexBusy = false;\n  },\n  createCustomizeSourcesModal: function createCustomizeSourcesModal() {\n    // Recreate it each time\n    var modal = new Craft.CustomizeSourcesModal(this, {\n      onHide: function onHide() {\n        modal.destroy();\n      }\n    });\n    return modal;\n  },\n  disable: function disable() {\n    if (this.sourceSelect) {\n      this.sourceSelect.disable();\n    }\n\n    if (this.view) {\n      this.view.disable();\n    }\n\n    this.base();\n  },\n  enable: function enable() {\n    if (this.sourceSelect) {\n      this.sourceSelect.enable();\n    }\n\n    if (this.view) {\n      this.view.enable();\n    }\n\n    this.base();\n  },\n  // Events\n  // =========================================================================\n  onAfterInit: function onAfterInit() {\n    this.settings.onAfterInit();\n    this.trigger('afterInit');\n  },\n  onSelectSource: function onSelectSource() {\n    this.settings.onSelectSource(this.sourceKey);\n    this.trigger('selectSource', {\n      sourceKey: this.sourceKey\n    });\n  },\n  onSelectSite: function onSelectSite() {\n    this.settings.onSelectSite(this.siteId);\n    this.trigger('selectSite', {\n      siteId: this.siteId\n    });\n  },\n  onUpdateElements: function onUpdateElements() {\n    this.settings.onUpdateElements();\n    this.trigger('updateElements');\n  },\n  onSelectionChange: function onSelectionChange() {\n    this.settings.onSelectionChange();\n    this.trigger('selectionChange');\n  },\n  onEnableElements: function onEnableElements($elements) {\n    this.settings.onEnableElements($elements);\n    this.trigger('enableElements', {\n      elements: $elements\n    });\n  },\n  onDisableElements: function onDisableElements($elements) {\n    this.settings.onDisableElements($elements);\n    this.trigger('disableElements', {\n      elements: $elements\n    });\n  },\n  onAfterAction: function onAfterAction(action, params) {\n    this.settings.onAfterAction(action, params);\n    this.trigger('afterAction', {\n      action: action,\n      params: params\n    });\n  },\n  // Private methods\n  // =========================================================================\n  // UI state handlers\n  // -------------------------------------------------------------------------\n  _handleSourceSelectionChange: function _handleSourceSelectionChange() {\n    // If the selected source was just removed (maybe because its parent was collapsed),\n    // there won't be a selected source\n    if (!this.sourceSelect.totalSelected) {\n      this.sourceSelect.selectItem(this.$visibleSources.first());\n      return;\n    }\n\n    if (this.selectSource(this.sourceSelect.$selectedItems)) {\n      this.updateElements();\n    }\n  },\n  _handleActionTriggerSubmit: function _handleActionTriggerSubmit(ev) {\n    ev.preventDefault();\n    var $form = $(ev.currentTarget); // Make sure Craft.ElementActionTrigger isn't overriding this\n\n    if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n      return;\n    }\n\n    var actionClass = $form.data('action'),\n        params = Garnish.getPostData($form);\n    this.submitAction(actionClass, params);\n  },\n  _handleMenuActionTriggerSubmit: function _handleMenuActionTriggerSubmit(ev) {\n    var $option = $(ev.option); // Make sure Craft.ElementActionTrigger isn't overriding this\n\n    if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n      return;\n    }\n\n    var actionClass = $option.data('action');\n    this.submitAction(actionClass);\n  },\n  _handleStatusChange: function _handleStatusChange(ev) {\n    this.statusMenu.$options.removeClass('sel');\n    var $option = $(ev.selectedOption).addClass('sel');\n    this.$statusMenuBtn.html($option.html());\n    this.status = $option.data('status');\n    this.updateElements();\n  },\n  _handleSiteChange: function _handleSiteChange(ev) {\n    this.siteMenu.$options.removeClass('sel');\n    var $option = $(ev.selectedOption).addClass('sel');\n    this.$siteMenuBtn.html($option.html());\n\n    this._setSite($option.data('site-id'));\n\n    this.onSelectSite();\n  },\n  _setSite: function _setSite(siteId) {\n    this.siteId = siteId;\n    this.$visibleSources = $(); // Hide any sources that aren't available for this site\n\n    var $firstVisibleSource;\n    var $source;\n    var selectNewSource = false;\n\n    for (var i = 0; i < this.$sources.length; i++) {\n      $source = this.$sources.eq(i);\n\n      if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n        $source.parent().removeClass('hidden');\n        this.$visibleSources = this.$visibleSources.add($source);\n\n        if (!$firstVisibleSource) {\n          $firstVisibleSource = $source;\n        }\n      } else {\n        $source.parent().addClass('hidden'); // Is this the currently selected source?\n\n        if (this.$source && this.$source.get(0) == $source.get(0)) {\n          selectNewSource = true;\n        }\n      }\n    }\n\n    if (selectNewSource) {\n      this.selectSource($firstVisibleSource);\n    } // Hide any empty-nester headings\n\n\n    var $headings = this.getSourceContainer().children('.heading');\n    var $heading;\n\n    for (i = 0; i < $headings.length; i++) {\n      $heading = $headings.eq(i);\n\n      if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n        $heading.removeClass('hidden');\n      } else {\n        $heading.addClass('hidden');\n      }\n    }\n\n    if (this.initialized) {\n      // Remember this site for later\n      Craft.setLocalStorage('BaseElementIndex.siteId', siteId); // Update the elements\n\n      this.updateElements();\n    }\n  },\n  _handleSortChange: function _handleSortChange(ev) {\n    var $option = $(ev.selectedOption);\n\n    if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n      return;\n    } // Is this an attribute or a direction?\n\n\n    if ($option.parent().parent().is(this.$sortAttributesList)) {\n      this.setSortAttribute($option.data('attr'));\n    } else {\n      this.setSortDirection($option.data('dir'));\n    }\n\n    this.storeSortAttributeAndDirection();\n    this.updateElements();\n  },\n  _handleSelectionChange: function _handleSelectionChange() {\n    this.updateActionTriggers();\n    this.onSelectionChange();\n  },\n  _handleSourceToggleClick: function _handleSourceToggleClick(ev) {\n    this._toggleSource($(ev.currentTarget).prev('a'));\n\n    ev.stopPropagation();\n  },\n  // Source managemnet\n  // -------------------------------------------------------------------------\n  _getSourcesInList: function _getSourcesInList($list) {\n    return $list.children('li').children('a');\n  },\n  _getChildSources: function _getChildSources($source) {\n    var $list = $source.siblings('ul');\n    return this._getSourcesInList($list);\n  },\n  _getSourceToggle: function _getSourceToggle($source) {\n    return $source.siblings('.toggle');\n  },\n  _initSources: function _initSources($sources) {\n    for (var i = 0; i < $sources.length; i++) {\n      this.initSource($($sources[i]));\n    }\n  },\n  _deinitSources: function _deinitSources($sources) {\n    for (var i = 0; i < $sources.length; i++) {\n      this.deinitSource($($sources[i]));\n    }\n  },\n  _toggleSource: function _toggleSource($source) {\n    if ($source.parent('li').hasClass('expanded')) {\n      this._collapseSource($source);\n    } else {\n      this._expandSource($source);\n    }\n  },\n  _expandSource: function _expandSource($source) {\n    $source.parent('li').addClass('expanded');\n\n    var $childSources = this._getChildSources($source);\n\n    this._initSources($childSources);\n\n    var key = $source.data('key');\n\n    if (this.instanceState.expandedSources.indexOf(key) === -1) {\n      this.instanceState.expandedSources.push(key);\n      this.storeInstanceState();\n    }\n  },\n  _collapseSource: function _collapseSource($source) {\n    $source.parent('li').removeClass('expanded');\n\n    var $childSources = this._getChildSources($source);\n\n    this._deinitSources($childSources);\n\n    var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n\n    if (i !== -1) {\n      this.instanceState.expandedSources.splice(i, 1);\n      this.storeInstanceState();\n    }\n  },\n  // View\n  // -------------------------------------------------------------------------\n  _updateView: function _updateView(params, response) {\n    // Cleanup\n    // -------------------------------------------------------------\n    // Get rid of the old action triggers regardless of whether the new batch has actions or not\n    if (this.actions) {\n      this.hideActionTriggers();\n      this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n    }\n\n    if (this.$selectAllContainer) {\n      // Git rid of the old select all button\n      this.$selectAllContainer.detach();\n    } // Batch actions setup\n    // -------------------------------------------------------------\n\n\n    if (response.actions && response.actions.length) {\n      this.actions = response.actions;\n      this.actionsHeadHtml = response.actionsHeadHtml;\n      this.actionsFootHtml = response.actionsFootHtml; // First time?\n\n      if (!this.$selectAllContainer) {\n        // Create the select all button\n        this.$selectAllContainer = $('<div class=\"selectallcontainer\"/>');\n        this.$selectAllBtn = $('<div class=\"btn\"/>').appendTo(this.$selectAllContainer);\n        this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').appendTo(this.$selectAllBtn);\n        this.$selectAllBtn.attr({\n          'role': 'checkbox',\n          'tabindex': '0',\n          'aria-checked': 'false'\n        });\n        this.addListener(this.$selectAllBtn, 'click', function () {\n          if (this.view.getSelectedElements().length === 0) {\n            this.view.selectAllElements();\n          } else {\n            this.view.deselectAllElements();\n          }\n        });\n        this.addListener(this.$selectAllBtn, 'keydown', function (ev) {\n          if (ev.keyCode === Garnish.SPACE_KEY) {\n            ev.preventDefault();\n            $(ev.currentTarget).trigger('click');\n          }\n        });\n      } else {\n        // Reset the select all button\n        this.$selectAllCheckbox.removeClass('indeterminate checked');\n        this.$selectAllBtn.attr('aria-checked', 'false');\n      } // Place the select all button at the beginning of the toolbar\n\n\n      this.$selectAllContainer.prependTo(this.$toolbarFlexContainer);\n    } // Update the view with the new container + elements HTML\n    // -------------------------------------------------------------\n\n\n    this.$elements.html(response.html);\n    Craft.appendHeadHtml(response.headHtml);\n    Craft.appendFootHtml(response.footHtml); // Create the view\n    // -------------------------------------------------------------\n    // Should we make the view selectable?\n\n    var selectable = this.actions || this.settings.selectable;\n    this.view = this.createView(this.getSelectedViewMode(), {\n      context: this.settings.context,\n      batchSize: this.settings.batchSize,\n      params: params,\n      selectable: selectable,\n      multiSelect: this.actions || this.settings.multiSelect,\n      checkboxMode: !!this.actions,\n      onSelectionChange: $.proxy(this, '_handleSelectionChange')\n    }); // Auto-select elements\n    // -------------------------------------------------------------\n\n    if (this._autoSelectElements) {\n      if (selectable) {\n        for (var i = 0; i < this._autoSelectElements.length; i++) {\n          this.view.selectElementById(this._autoSelectElements[i]);\n        }\n      }\n\n      this._autoSelectElements = null;\n    } // Trigger the event\n    // -------------------------------------------------------------\n\n\n    this.onUpdateElements();\n  },\n  _createTriggers: function _createTriggers() {\n    var triggers = [],\n        safeMenuActions = [],\n        destructiveMenuActions = [];\n    var i;\n\n    for (i = 0; i < this.actions.length; i++) {\n      var action = this.actions[i];\n\n      if (action.trigger) {\n        var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>').data('action', action.type).append(action.trigger);\n        this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n        triggers.push($form);\n      } else {\n        if (!action.destructive) {\n          safeMenuActions.push(action);\n        } else {\n          destructiveMenuActions.push(action);\n        }\n      }\n    }\n\n    var $btn;\n\n    if (safeMenuActions.length || destructiveMenuActions.length) {\n      var $menuTrigger = $('<form/>');\n      $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n      var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n          $safeList = this._createMenuTriggerList(safeMenuActions, false),\n          $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n      if ($safeList) {\n        $safeList.appendTo($menu);\n      }\n\n      if ($safeList && $destructiveList) {\n        $('<hr/>').appendTo($menu);\n      }\n\n      if ($destructiveList) {\n        $destructiveList.appendTo($menu);\n      }\n\n      triggers.push($menuTrigger);\n    }\n\n    this._$triggers = $();\n\n    for (i = 0; i < triggers.length; i++) {\n      var $div = $('<div/>').append(triggers[i]);\n      this._$triggers = this._$triggers.add($div);\n    }\n\n    this._$triggers.insertAfter(this.$selectAllContainer);\n\n    Craft.appendHeadHtml(this.actionsHeadHtml);\n    Craft.appendFootHtml(this.actionsFootHtml);\n    Craft.initUiElements(this._$triggers);\n\n    if ($btn) {\n      $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n    }\n  },\n  _createMenuTriggerList: function _createMenuTriggerList(actions, destructive) {\n    if (actions && actions.length) {\n      var $ul = $('<ul/>');\n\n      for (var i = 0; i < actions.length; i++) {\n        var actionClass = actions[i].type;\n        $('<li/>').append($('<a/>', {\n          id: Craft.formatInputId(actionClass) + '-actiontrigger',\n          'class': destructive ? 'error' : null,\n          'data-action': actionClass,\n          text: actions[i].name\n        })).appendTo($ul);\n      }\n\n      return $ul;\n    }\n  }\n}, // Static Properties\n// =============================================================================\n{\n  defaults: {\n    context: 'index',\n    modal: null,\n    storageKey: null,\n    criteria: null,\n    batchSize: 50,\n    disabledElementIds: [],\n    selectable: false,\n    multiSelect: false,\n    buttonContainer: null,\n    hideSidebar: false,\n    refreshSourcesAction: 'element-indexes/get-source-tree-html',\n    updateElementsAction: 'element-indexes/get-elements',\n    submitActionsAction: 'element-indexes/perform-action',\n    toolbarFixed: null,\n    onAfterInit: $.noop,\n    onSelectSource: $.noop,\n    onSelectSite: $.noop,\n    onUpdateElements: $.noop,\n    onSelectionChange: $.noop,\n    onEnableElements: $.noop,\n    onDisableElements: $.noop,\n    onAfterAction: $.noop\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (SectionIndex);\n\n//# sourceURL=webpack:///./resources/js/modules/SectionIndex.js?")},"./resources/js/modules/SectionSelectInput.js":
/*!****************************************************!*\
  !*** ./resources/js/modules/SectionSelectInput.js ***!
  \****************************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/** global: Craft */\n\n/** global: Garnish */\n\n/**\n * Element Select input\n */\nvar SectionSelectInput = Garnish.Base.extend({\n  thumbLoader: null,\n  elementSelect: null,\n  elementSort: null,\n  modal: null,\n  elementEditor: null,\n  $container: null,\n  $elementsContainer: null,\n  $elements: null,\n  $addElementBtn: null,\n  _initialized: false,\n  init: function init(settings) {\n    // Normalize the settings and set them\n    // ---------------------------------------------------------------------\n    // Are they still passing in a bunch of arguments?\n    if (!$.isPlainObject(settings)) {\n      // Loop through all of the old arguments and apply them to the settings\n      var normalizedSettings = {},\n          args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n      for (var i = 0; i < args.length; i++) {\n        if (typeof arguments[i] !== 'undefined') {\n          normalizedSettings[args[i]] = arguments[i];\n        } else {\n          break;\n        }\n      }\n\n      settings = normalizedSettings;\n    }\n\n    this.setSettings(settings, Craft.BaseElementSelectInput.defaults); // Apply the storage key prefix\n\n    if (this.settings.modalStorageKey) {\n      this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n    } // No reason for this to be sortable if we're only allowing 1 selection\n\n\n    if (this.settings.limit == 1) {\n      this.settings.sortable = false;\n    }\n\n    this.$container = this.getContainer(); // Store a reference to this class\n\n    this.$container.data('elementSelect', this);\n    this.$elementsContainer = this.getElementsContainer();\n    this.$addElementBtn = this.getAddElementsBtn();\n\n    if (this.$addElementBtn && this.settings.limit == 1) {\n      this.$addElementBtn.css('position', 'absolute').css('top', 0).css(Craft.left, 0);\n    }\n\n    this.thumbLoader = new Craft.ElementThumbLoader();\n    this.initElementSelect();\n    this.initElementSort();\n    this.resetElements();\n\n    if (this.$addElementBtn) {\n      this.addListener(this.$addElementBtn, 'activate', 'showModal');\n    }\n\n    this._initialized = true;\n  },\n\n  get totalSelected() {\n    return this.$elements.length;\n  },\n\n  getContainer: function getContainer() {\n    return $('#' + this.settings.id);\n  },\n  getElementsContainer: function getElementsContainer() {\n    return this.$container.children('.elements');\n  },\n  getElements: function getElements() {\n    return this.$elementsContainer.children();\n  },\n  getAddElementsBtn: function getAddElementsBtn() {\n    return this.$container.children('.btn.add');\n  },\n  initElementSelect: function initElementSelect() {\n    if (this.settings.selectable) {\n      this.elementSelect = new Garnish.Select({\n        multi: this.settings.sortable,\n        filter: ':not(.delete)'\n      });\n    }\n  },\n  initElementSort: function initElementSort() {\n    if (this.settings.sortable) {\n      this.elementSort = new Garnish.DragSort({\n        container: this.$elementsContainer,\n        filter: this.settings.selectable ? $.proxy(function () {\n          // Only return all the selected items if the target item is selected\n          if (this.elementSort.$targetItem.hasClass('sel')) {\n            return this.elementSelect.getSelectedItems();\n          } else {\n            return this.elementSort.$targetItem;\n          }\n        }, this) : null,\n        ignoreHandleSelector: '.delete',\n        axis: this.getElementSortAxis(),\n        collapseDraggees: true,\n        magnetStrength: 4,\n        helperLagBase: 1.5,\n        onSortChange: this.settings.selectable ? $.proxy(function () {\n          this.elementSelect.resetItemOrder();\n        }, this) : null\n      });\n    }\n  },\n  getElementSortAxis: function getElementSortAxis() {\n    return this.settings.viewMode === 'list' ? 'y' : null;\n  },\n  canAddMoreElements: function canAddMoreElements() {\n    return !this.settings.limit || this.$elements.length < this.settings.limit;\n  },\n  updateAddElementsBtn: function updateAddElementsBtn() {\n    if (this.canAddMoreElements()) {\n      this.enableAddElementsBtn();\n    } else {\n      this.disableAddElementsBtn();\n    }\n  },\n  disableAddElementsBtn: function disableAddElementsBtn() {\n    if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n      this.$addElementBtn.addClass('disabled');\n\n      if (this.settings.limit == 1) {\n        if (this._initialized) {\n          this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n        } else {\n          this.$addElementBtn.hide();\n        }\n      }\n    }\n  },\n  enableAddElementsBtn: function enableAddElementsBtn() {\n    if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n      this.$addElementBtn.removeClass('disabled');\n\n      if (this.settings.limit == 1) {\n        if (this._initialized) {\n          this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n        } else {\n          this.$addElementBtn.show();\n        }\n      }\n    }\n  },\n  resetElements: function resetElements() {\n    if (this.$elements !== null) {\n      this.removeElements(this.$elements);\n    } else {\n      this.$elements = $();\n    }\n\n    this.addElements(this.getElements());\n  },\n  addElements: function addElements($elements) {\n    this.thumbLoader.load($elements);\n\n    if (this.settings.selectable) {\n      this.elementSelect.addItems($elements);\n    }\n\n    if (this.settings.sortable) {\n      this.elementSort.addItems($elements);\n    }\n\n    if (this.settings.editable) {\n      this._handleShowElementEditor = $.proxy(function (ev) {\n        var $element = $(ev.currentTarget);\n\n        if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n          this.elementEditor = this.createElementEditor($element);\n        }\n      }, this);\n      this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n      if ($.isTouchCapable()) {\n        this.addListener($elements, 'taphold', this._handleShowElementEditor);\n      }\n    }\n\n    $elements.find('.delete').on('click', $.proxy(function (ev) {\n      this.removeElement($(ev.currentTarget).closest('.element'));\n    }, this));\n    this.$elements = this.$elements.add($elements);\n    this.updateAddElementsBtn();\n  },\n  createElementEditor: function createElementEditor($element) {\n    return Craft.createElementEditor(this.settings.elementType, $element);\n  },\n  removeElements: function removeElements($elements) {\n    if (this.settings.selectable) {\n      this.elementSelect.removeItems($elements);\n    }\n\n    if (this.modal) {\n      var ids = [];\n\n      for (var i = 0; i < $elements.length; i++) {\n        var id = $elements.eq(i).data('id');\n\n        if (id) {\n          ids.push(id);\n        }\n      }\n\n      if (ids.length) {\n        this.modal.elementIndex.enableElementsById(ids);\n      }\n    } // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n\n\n    $elements.children('input').prop('disabled', true);\n    this.$elements = this.$elements.not($elements);\n    this.updateAddElementsBtn();\n    this.onRemoveElements();\n  },\n  removeElement: function removeElement($element) {\n    this.removeElements($element);\n    this.animateElementAway($element, function () {\n      $element.remove();\n    });\n  },\n  animateElementAway: function animateElementAway($element, callback) {\n    $element.css('z-index', 0);\n    var animateCss = {\n      opacity: -1\n    };\n    animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n    if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n      animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n    }\n\n    $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, callback);\n  },\n  showModal: function showModal() {\n    // Make sure we haven't reached the limit\n    if (!this.canAddMoreElements()) {\n      return;\n    }\n\n    if (!this.modal) {\n      this.modal = this.createModal();\n    } else {\n      this.modal.show();\n    }\n  },\n  createModal: function createModal() {\n    return Craft.createSectionSelectorModal(this.settings.elementType, this.getModalSettings()); //return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n  },\n  getModalSettings: function getModalSettings() {\n    return $.extend({\n      closeOtherModals: false,\n      storageKey: this.modalStorageKey,\n      sources: this.settings.sources,\n      criteria: this.settings.criteria,\n      multiSelect: this.settings.limit != 1,\n      showSiteMenu: this.settings.showSiteMenu,\n      disabledElementIds: this.getDisabledElementIds(),\n      onSelect: $.proxy(this, 'onModalSelect')\n    }, this.settings.modalSettings);\n  },\n  getSelectedElementIds: function getSelectedElementIds() {\n    var ids = [];\n\n    for (var i = 0; i < this.$elements.length; i++) {\n      ids.push(this.$elements.eq(i).data('id'));\n    }\n\n    return ids;\n  },\n  getDisabledElementIds: function getDisabledElementIds() {\n    var ids = this.getSelectedElementIds();\n\n    if (this.settings.sourceElementId) {\n      ids.push(this.settings.sourceElementId);\n    }\n\n    return ids;\n  },\n  onModalSelect: function onModalSelect(elements) {\n    if (this.settings.limit) {\n      // Cut off any excess elements\n      var slotsLeft = this.settings.limit - this.$elements.length;\n\n      if (elements.length > slotsLeft) {\n        elements = elements.slice(0, slotsLeft);\n      }\n    }\n\n    this.selectElements(elements);\n    this.updateDisabledElementsInModal();\n  },\n  selectElements: function selectElements(elements) {\n    for (var i = 0; i < elements.length; i++) {\n      var elementInfo = elements[i],\n          $element = this.createNewElement(elementInfo);\n      this.appendElement($element);\n      this.addElements($element);\n      this.animateElementIntoPlace(elementInfo.$element, $element);\n    }\n\n    this.onSelectElements(elements);\n  },\n  createNewElement: function createNewElement(elementInfo) {\n    var $element = elementInfo.$element.clone(); // Make a couple tweaks\n\n    Craft.setElementSize($element, this.settings.viewMode === 'large' ? 'large' : 'small');\n    $element.addClass('removable');\n    $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' + '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n    return $element;\n  },\n  appendElement: function appendElement($element) {\n    $element.appendTo(this.$elementsContainer);\n  },\n  animateElementIntoPlace: function animateElementIntoPlace($modalElement, $inputElement) {\n    var origOffset = $modalElement.offset(),\n        destOffset = $inputElement.offset(),\n        $helper = $inputElement.clone().appendTo(Garnish.$bod);\n    $inputElement.css('visibility', 'hidden');\n    $helper.css({\n      position: 'absolute',\n      zIndex: 10000,\n      top: origOffset.top,\n      left: origOffset.left\n    });\n    var animateCss = {\n      top: destOffset.top,\n      left: destOffset.left\n    };\n    $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function () {\n      $helper.remove();\n      $inputElement.css('visibility', 'visible');\n    });\n  },\n  updateDisabledElementsInModal: function updateDisabledElementsInModal() {\n    if (this.modal.elementIndex) {\n      this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n    }\n  },\n  getElementById: function getElementById(id) {\n    for (var i = 0; i < this.$elements.length; i++) {\n      var $element = this.$elements.eq(i);\n\n      if ($element.data('id') == id) {\n        return $element;\n      }\n    }\n  },\n  onSelectElements: function onSelectElements(elements) {\n    this.trigger('selectElements', {\n      elements: elements\n    });\n    this.settings.onSelectElements(elements);\n  },\n  onRemoveElements: function onRemoveElements() {\n    this.trigger('removeElements');\n    this.settings.onRemoveElements();\n  }\n}, {\n  ADD_FX_DURATION: 200,\n  REMOVE_FX_DURATION: 200,\n  defaults: {\n    id: null,\n    name: null,\n    fieldId: null,\n    elementType: null,\n    sources: null,\n    criteria: {},\n    sourceElementId: null,\n    viewMode: 'list',\n    limit: null,\n    showSiteMenu: false,\n    modalStorageKey: null,\n    modalSettings: {},\n    onSelectElements: $.noop,\n    onRemoveElements: $.noop,\n    sortable: true,\n    selectable: true,\n    editable: true,\n    editorSettings: {}\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (SectionSelectInput);\n\n//# sourceURL=webpack:///./resources/js/modules/SectionSelectInput.js?")},"./resources/js/modules/SectionSelectorModal.js":
/*!******************************************************!*\
  !*** ./resources/js/modules/SectionSelectorModal.js ***!
  \******************************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/** global: Craft */\n\n/** global: Garnish */\n\n/**\n * Element selector modal class\n */\nvar SectionSelectorModal = Garnish.Modal.extend({\n  elementType: null,\n  elementIndex: null,\n  $body: null,\n  $selectBtn: null,\n  $sidebar: null,\n  $sources: null,\n  $sourceToggles: null,\n  $main: null,\n  $search: null,\n  $elements: null,\n  $tbody: null,\n  $primaryButtons: null,\n  $secondaryButtons: null,\n  $cancelBtn: null,\n  $footerSpinner: null,\n  init: function init(elementType, settings) {\n    console.log('hello');\n    this.elementType = elementType;\n    this.setSettings(settings, Craft.BaseElementSelectorModal.defaults); // Build the modal\n\n    var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n        $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n        $footer = $('<div class=\"footer\"/>').appendTo($container);\n    this.base($container, this.settings);\n    this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n    this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n    this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n    this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n    this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n    this.$body = $body;\n    this.addListener(this.$cancelBtn, 'activate', 'cancel');\n    this.addListener(this.$selectBtn, 'activate', 'selectElements');\n  },\n  onFadeIn: function onFadeIn() {\n    if (!this.elementIndex) {\n      this._createSectionIndex();\n    } else {\n      // Auto-focus the Search box\n      if (!Garnish.isMobileBrowser(true)) {\n        this.elementIndex.$search.trigger('focus');\n      }\n    }\n\n    this.base();\n  },\n  onSelectionChange: function onSelectionChange() {\n    this.updateSelectBtnState();\n  },\n  updateSelectBtnState: function updateSelectBtnState() {\n    if (this.$selectBtn) {\n      if (this.elementIndex.getSelectedElements().length) {\n        this.enableSelectBtn();\n      } else {\n        this.disableSelectBtn();\n      }\n    }\n  },\n  enableSelectBtn: function enableSelectBtn() {\n    this.$selectBtn.removeClass('disabled');\n  },\n  disableSelectBtn: function disableSelectBtn() {\n    this.$selectBtn.addClass('disabled');\n  },\n  enableCancelBtn: function enableCancelBtn() {\n    this.$cancelBtn.removeClass('disabled');\n  },\n  disableCancelBtn: function disableCancelBtn() {\n    this.$cancelBtn.addClass('disabled');\n  },\n  showFooterSpinner: function showFooterSpinner() {\n    this.$footerSpinner.removeClass('hidden');\n  },\n  hideFooterSpinner: function hideFooterSpinner() {\n    this.$footerSpinner.addClass('hidden');\n  },\n  cancel: function cancel() {\n    if (!this.$cancelBtn.hasClass('disabled')) {\n      this.hide();\n    }\n  },\n  selectElements: function selectElements() {\n    if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n      // TODO: This code shouldn't know about views' elementSelect objects\n      this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n      var $selectedElements = this.elementIndex.getSelectedElements(),\n          elementInfo = this.getElementInfo($selectedElements);\n      this.onSelect(elementInfo);\n\n      if (this.settings.disableElementsOnSelect) {\n        this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n      }\n\n      if (this.settings.hideOnSelect) {\n        this.hide();\n      }\n    }\n  },\n  getElementInfo: function getElementInfo($selectedElements) {\n    var info = [];\n\n    for (var i = 0; i < $selectedElements.length; i++) {\n      var $element = $($selectedElements[i]);\n      var elementInfo = Craft.getElementInfo($element);\n      info.push(elementInfo);\n    }\n\n    return info;\n  },\n  show: function show() {\n    this.updateSelectBtnState();\n    this.base();\n  },\n  onSelect: function onSelect(elementInfo) {\n    this.settings.onSelect(elementInfo);\n  },\n  disable: function disable() {\n    if (this.elementIndex) {\n      this.elementIndex.disable();\n    }\n\n    this.base();\n  },\n  enable: function enable() {\n    if (this.elementIndex) {\n      this.elementIndex.enable();\n    }\n\n    this.base();\n  },\n  _createSectionIndex: function _createSectionIndex() {\n    // Get the modal body HTML based on the settings\n    var data = {\n      context: 'modal',\n      elementType: this.elementType,\n      sources: this.settings.sources\n    };\n\n    if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n      data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n    }\n\n    Craft.postActionRequest('/admin/import/sections/new', data, $.proxy(function (response, textStatus) {\n      if (textStatus === 'success') {\n        this.$body.html(response.html);\n\n        if (this.$body.has('.sidebar:not(.hidden)').length) {\n          this.$body.addClass('has-sidebar');\n        } // Initialize the element index\n\n\n        this.elementIndex = Craft.createSectionIndex(this.elementType, this.$body, {\n          context: 'modal',\n          modal: this,\n          storageKey: this.settings.storageKey,\n          criteria: this.settings.criteria,\n          disabledElementIds: this.settings.disabledElementIds,\n          selectable: true,\n          multiSelect: this.settings.multiSelect,\n          buttonContainer: this.$secondaryButtons,\n          onSelectionChange: $.proxy(this, 'onSelectionChange'),\n          hideSidebar: this.settings.hideSidebar\n        }); // Double-clicking or double-tapping should select the elements\n\n        this.addListener(this.elementIndex.$elements, 'doubletap', function (ev, touchData) {\n          // Make sure the touch targets are the same\n          // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n          if (touchData.firstTap.target === touchData.secondTap.target) {\n            this.selectElements();\n          }\n        });\n      }\n    }, this));\n  }\n}, {\n  defaults: {\n    resizable: true,\n    storageKey: null,\n    sources: null,\n    criteria: null,\n    multiSelect: false,\n    showSiteMenu: null,\n    disabledElementIds: [],\n    disableElementsOnSelect: false,\n    hideOnSelect: true,\n    onCancel: $.noop,\n    onSelect: $.noop,\n    hideIndexSidebar: false\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (SectionSelectorModal);\n\n//# sourceURL=webpack:///./resources/js/modules/SectionSelectorModal.js?")},"./resources/js/modules/SubmitButton.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/SubmitButton.js ***!
  \**********************************************/
/*! exports provided: onInit */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onInit\", function() { return onInit; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SubmitButton =\n/*#__PURE__*/\nfunction () {\n  function SubmitButton(node) {\n    _classCallCheck(this, SubmitButton);\n\n    this.button = node;\n    this.submitUrl = this.button.dataset.submitButton;\n    this.button.addEventListener('click', this.submit.bind(this));\n  }\n\n  _createClass(SubmitButton, [{\n    key: \"submit\",\n    value: function submit(e) {\n      e.preventDefault();\n\n      if (!parseInt(this.button.dataset.valid)) {\n        console.log('Disabled');\n        return;\n      }\n\n      var formData = this.serialize();\n      fetch(this.submitUrl, {\n        method: 'post',\n        credentials: 'same-origin',\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        body: formData\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (data) {\n        console.log(data);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var formData = new FormData(); // Get the original import file name\n\n      var file = document.querySelector('[name=\"importFile\"]');\n\n      if (file) {\n        formData.append('importFile', file.value);\n      }\n\n      var allInputs = document.querySelectorAll('input,select'); //'.ImportPreview-entry--field>.input>*');\n\n      if (allInputs && allInputs.length) {\n        Array.prototype.forEach.call(allInputs, function (input) {\n          if (input.disabled) {\n            return;\n          } else if (input.options !== undefined) {\n            // Select\n            var value = '';\n            Array.prototype.forEach.call(input.selectedOptions, function (opt) {\n              if (value.length) {\n                value += ',';\n              }\n\n              value += opt.value;\n            });\n            formData.append(input.name, value);\n          } else {\n            // Normal text input\n            formData.append(input.name, input.value);\n          }\n        });\n      }\n\n      return formData;\n    }\n  }]);\n\n  return SubmitButton;\n}();\n\nvar onInit = function onInit() {\n  var submitButtons = document.querySelectorAll('[data-submit-button]');\n\n  if (submitButtons && submitButtons.length) {\n    Array.prototype.forEach.call(submitButtons, function (button) {\n      new SubmitButton(button);\n    });\n  }\n};\n\n//# sourceURL=webpack:///./resources/js/modules/SubmitButton.js?")},"./resources/sass/Import.scss":
/*!************************************!*\
  !*** ./resources/sass/Import.scss ***!
  \************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('\nvar content = __webpack_require__(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./Import.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/sass/Import.scss");\n\nif(typeof content === \'string\') content = [[module.i, content, \'\']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {"hmr":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./resources/sass/Import.scss?')},0:
/*!**************************************!*\
  !*** multi ./resources/js/Import.js ***!
  \**************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! /Users/abryrath/Union/Library/import/resources/js/Import.js */"./resources/js/Import.js");\n\n\n//# sourceURL=webpack:///multi_./resources/js/Import.js?')}});